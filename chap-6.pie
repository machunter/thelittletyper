#lang pie
(Vec Atom 3)

(claim vec-of-one
  (Vec Atom 1))

(define vec-of-one
  (vec:: 'oyster vecnil))

(the (Vec Atom 0)
  vecnil)


(claim vec-of-two
  (Vec Atom 2))

(define  vec-of-two
  (vec:: 'crimini
    (vec:: 'shiitake vecnil)))

(claim first-of-one
  (Pi ((E U))
    (-> (Vec E 1)
        E)))

(define first-of-one
  (lambda (E)
    (lambda (es)
      (head es))))

(first-of-one Atom vec-of-one)

(claim first-of-two
  (Pi ((E U))
    (-> (Vec E 2)
        E)))

(define first-of-two
  (lambda (E)
    (lambda (es)
      (head es))))

(first-of-two Atom vec-of-two)

(claim first
  (Pi ((E U)
       (l Nat))
  (-> (Vec E (add1 l))
      E)))

; why (add1 l)
; because of vecnil, there is no first entry to be found in vecnil
; otherwise we would define a non-total function
; the big lesson
; Make a function total by using a more specific type to rule out unwanted arguments

(define first
  (lambda (E l)
    (lambda (es)
      (head es))))

(first Atom 0 vec-of-one)
(first Atom 1 vec-of-two)


; we could have also written
(claim first0
  (Pi ((E U))
    (Pi ((l Nat))
        (-> (Vec E (add1 l))
            E))))

(define first0
  (lambda (E)
    (lambda (l)
      (lambda (es)
        (head es)))))

; we could have also written
(claim first1
  (Pi ((E U))
    (Pi ((l Nat))
        (Pi ((es (Vec E (add1 l))))
            E))))

(define first1
  (lambda (E)
    (lambda (l)
      (lambda (es)
        (head es)))))

; first, first0, first1 are all the same definitions
(first Atom)
(first0 Atom)
(first Atom)

(first Atom 2)
(first0 Atom 2)
(first1 Atom 2)

;actually everything is a Pi
; (-> Y
;  X)
; is a shorter way of writing
; (Pi ((y Y))
;   X)
; when y is not used n X


(claim rest
  (Pi ((E U)
       (l Nat))
    (-> (Vec E (add1 l))
        (Vec E l))))

(define rest
  (lambda (E l)
    (lambda (es)
      (tail es))))

(rest Atom 0 vec-of-one)
(rest Atom 1 vec-of-two)