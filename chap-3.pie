#lang pie
(the (Pair Atom Atom)
  (cons 'spinach 'cauliflower))

(cdr
  (the (Pair Atom Nat)
    (cons 'brussels-sprout 4)))


(claim step
  (-> Nat
      Nat))

(define step
  (lambda(n)
    (add1 n)))

; if applied to a value greater than 0
; step is evaluated as such
; (step
;   (iter-Nat (n-1)
;     base
;     step))


(iter-Nat 1
  3
  step)
; so this is evaluated as
; (add1
;   (iter-Nat 0
;    3
;    step))
; which evaluate to (add1 3)
; 4


(iter-Nat 5
  3
  step)

;breaks down into
;1
(add1
  (iter-Nat 4
    3
    step))
;2
(add1
  (add1
    (iter-Nat 3
      3
      step)))
;3
(add1
  (add1
    (add1
      (iter-Nat 2
        3
        step))))
;4
(add1
  (add1
    (add1
      (add1
        (iter-Nat 1
          3
          step)))))
;5
(add1
  (add1
    (add1
      (add1
        (add1
          (iter-Nat 0
            3
            step))))))
;6
(add1
  (add1
    (add1
      (add1
        (add1
          3)))))

;step is applied n times to the base

(claim +
  (-> Nat Nat
      Nat))

; pretty obvious we start with i and add1 j times
(define +
  (lambda (i j)
    (iter-Nat j
      i
      (lambda (n)
        (add1 n)))))

;which-Nat -> if
;iter-Nat -> for
;rec-Nat -> recursion

(claim rec-step
  (-> Nat Nat
      Nat))

(define rec-step
  (lambda (n-1 almost)
    (add1
      (add1 almost))))


(rec-Nat (add1 1)
  0
  rec-step)

(add1
  (add1
    (rec-Nat 1
      0
      rec-step)))

(add1
  (add1
    (add1
      (add1
        (rec-Nat 0
          0
          rec-step)))))

; checking if a value is zero with rec-Nat
; it could be done with which-Nat
; but rec-Nat can do anything which-nat can do
(claim step-zerop
  (-> Nat Atom
      Atom))

; the step has no recursion so that's obvious
(define step-zerop
  (lambda (n-1 zerop_n-1)
    'nil))

(claim zerop
  (-> Nat
      Atom))

(define zerop
  (lambda (n)
    (rec-Nat n
      't
      step-zerop)))

(zerop 0)
; evaluates to
(rec-Nat 0
  't
  step-zerop)
; which evaluates to 't

(zerop (add1 0))
;evaluates to
(rec-Nat (add1 0)
  't
  step-zerop)
;which evaluates to
(step-zerop 0
  (rec-Nat 0
    't
    step-zerop))
;which evaluates to
(step-zerop 0 't)
;which evaluats to
'nil

;let get back to gauss
(claim step-gauss
  (-> Nat Nat
      Nat))

(define step-gauss
  (lambda (n-1 gauss_n-1)
    (+ (add1 n-1) gauss_n-1)))

(claim gauss
  (-> Nat
      Nat))

(define gauss
  (lambda (n)
    (rec-Nat n
      0
      step-gauss)))

;(gauss 0) is 0
(rec-Nat 0
  0
  step-gauss)
; which is 0

; what about (gauss 1)
(gauss 1)
; is the same as
(gauss (add1 0))
; which is
(rec-Nat (add1 0)
  0
  step-gauss)
; which is
(step-gauss 0
  (rec-Nat 0
    0
    step-gauss))
; which is
(step-gauss 0 0)
;which is
(+ (add1 0) 0)
;which is 1
1

; let's use this magic for *
; but since this is a slightly different path let's name it
; something else
(claim m*
  (-> Nat Nat
      Nat))

(claim make-step-*
  (-> Nat
      (-> Nat Nat
          Nat)))

(define make-step-*
  (lambda (j)
    (lambda (n-1 *n-1)
      (+ j *n-1))))

(define m*
  (lambda (n j)
    (rec-Nat n
      0
      (make-step-* j))))

; now where it gets exciting
(claim *
  (-> Nat Nat
      Nat))

(claim step-*
  (-> Nat Nat Nat
      Nat))

(define step-*
  (lambda (j n-1 *n-1)
    (+ j *n-1)))

(define *
  (lambda (n j)
    (rec-Nat n
      0
      (step-* j))))

;this is because
; (step-* j) is the same as
; (make-step-* j) it's just a different way of writing it
; (f x y z) <-> (((f x) y) z)
; i.e. f applied to x y z
; is the same as f applied to x which returns a function applied to y which returns a function applied to z


