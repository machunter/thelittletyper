#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 58 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1
          0 726 0 29 3 9 #"#lang pie"
0 0 25 29 1 #"\n"
0 0 17 3 58
#"; discussing peas, which products as many peas as required"
0 0 25 29 1 #"\n"
0 0 17 3 25 #"; we'll claim the type as"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 5 #"claim"
0 0 25 3 1 #" "
0 0 14 3 4 #"peas"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 22 3 2 #"Pi"
0 0 25 3 3 #" (("
0 0 14 3 13 #"how-many-peas"
0 0 25 3 1 #" "
0 0 22 3 3 #"Nat"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 22 3 3 #"Vec"
0 0 25 3 1 #" "
0 0 22 3 4 #"Atom"
0 0 25 3 1 #" "
0 0 14 3 13 #"how-many-peas"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 87
(
 #"; we've just defined a dependent, it's a type determined by somethin"
 #"g that's not a type"
) 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 19 #"; we could try this"
0 0 25 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 6 #"define"
0 0 17 3 5 #" Peas"
0 0 25 29 1 #"\n"
0 0 17 3 4 #";  ("
0 0 17 3 6 #"lambda"
0 0 17 3 2 #" ("
0 0 17 3 14 #"how-many-peas)"
0 0 25 29 1 #"\n"
0 0 17 3 6 #";    ("
0 0 17 3 7 #"rec-Nat"
0 0 17 3 14 #" how-many-peas"
0 0 25 29 1 #"\n"
0 0 17 3 8 #";      ("
0 0 17 3 3 #"the"
0 0 17 3 2 #" ("
0 0 17 3 3 #"Vec"
0 0 17 3 1 #" "
0 0 17 3 4 #"Atom"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 2 #") "
0 0 17 3 7 #"vecnil)"
0 0 25 29 1 #"\n"
0 0 17 3 8 #";      ("
0 0 17 3 6 #"lambda"
0 0 17 3 2 #" ("
0 0 17 3 3 #"l-1"
0 0 17 3 1 #" "
0 0 17 3 9 #"peas_l-1)"
0 0 25 29 1 #"\n"
0 0 17 3 10 #";        ("
0 0 17 3 5 #"vec::"
0 0 17 3 1 #" "
0 0 17 3 4 #"'pea"
0 0 17 3 1 #" "
0 0 17 3 13 #"peas_l-1)))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 79
(
 #"; the problem is is vecnil is a (Vec Atom 0), while the step doesn't"
 #" retun that"
) 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 69
(
 #"; the magic on ind-Nat (induction Nat), it's used for dependent type"
 #"s"
) 0 0 25 29 1 #"\n"
0 0 17 3 113
(
 #"; we need a new argument to state how the types of the base and the "
 #"step's almost answer depend on the target Nat"
) 0 0 25 29 1 #"\n"
0 0 17 3 24 #"; it's called the motive"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 17 #"; motive for peas"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 5 #"claim"
0 0 25 3 1 #" "
0 0 14 3 8 #"mot-peas"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 22 3 2 #"->"
0 0 25 3 1 #" "
0 0 22 3 3 #"Nat"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 22 3 1 #"U"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 8 #"mot-peas"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 22 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"k"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 22 3 3 #"Vec"
0 0 25 3 1 #" "
0 0 22 3 4 #"Atom"
0 0 25 3 1 #" "
0 0 14 3 1 #"k"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 8 #"mot-peas"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 17 3 50 #"; computes a new type in this case a (Vect Atom 4)"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 23 #"; let's define the step"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 5 #"claim"
0 0 25 3 1 #" "
0 0 14 3 9 #"step-peas"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 22 3 2 #"Pi"
0 0 25 3 3 #" (("
0 0 14 3 3 #"l-1"
0 0 25 3 1 #" "
0 0 22 3 3 #"Nat"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 22 3 2 #"->"
0 0 25 3 2 #" ("
0 0 14 3 8 #"mot-peas"
0 0 25 3 1 #" "
0 0 14 3 3 #"l-1"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 8 #"mot-peas"
0 0 25 3 2 #" ("
0 0 22 3 4 #"add1"
0 0 25 3 1 #" "
0 0 14 3 3 #"l-1"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 9 #"step-peas"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 22 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 3 #"l-1"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 22 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 8 #"peas_l-1"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 22 3 5 #"vec::"
0 0 25 3 1 #" "
0 0 22 3 4 #"'pea"
0 0 25 3 1 #" "
0 0 14 3 8 #"peas_l-1"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 9 #"step-peas"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 9 #"step-peas"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 9 #"step-peas"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 74
(
 #"; this take a an expression type of size 2 to end up with a type of "
 #"size 3"
) 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 24 #"; now we can define peas"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 4 #"peas"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 22 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 13 #"how-many-peas"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 7 #"ind-Nat"
0 0 25 3 1 #" "
0 0 14 3 13 #"how-many-peas"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 14 3 8 #"mot-peas"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 22 3 6 #"vecnil"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 14 3 9 #"step-peas"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"peas"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 17 3 39 #"; let's break this down, is the same as"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 9 #"step-peas"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 7 #"ind-Nat"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 14 3 8 #"mot-peas"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 22 3 6 #"vecnil"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 14 3 9 #"step-peas"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 17 3 22 #"; which is the same as"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 9 #"step-peas"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 9 #"step-peas"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 7 #"ind-Nat"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 14 3 8 #"mot-peas"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 22 3 6 #"vecnil"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 14 3 9 #"step-peas"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 22 #"; which is the same as"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 9 #"step-peas"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 9 #"step-peas"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 9 #"step-peas"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 15 3 7 #"ind-Nat"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 14 3 8 #"mot-peas"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 22 3 6 #"vecnil"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 14 3 9 #"step-peas"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 22 #"; which is the same as"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 9 #"step-peas"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 9 #"step-peas"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 9 #"step-peas"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 9 #"step-peas"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 15 3 7 #"ind-Nat"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"          "
0 0 14 3 8 #"mot-peas"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"          "
0 0 22 3 6 #"vecnil"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"          "
0 0 14 3 9 #"step-peas"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 21 #"; this term is vecnil"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 7 #"ind-Nat"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 14 3 8 #"mot-peas"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 22 3 6 #"vecnil"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 14 3 9 #"step-peas"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 24 #"; so everything rolls in"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 9 #"step-peas"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 9 #"step-peas"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 9 #"step-peas"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 9 #"step-peas"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 22 3 6 #"vecnil"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 23 #"; calculating each step"
0 0 25 29 1 #"\n"
0 0 17 3 15 #"; this is 1 pea"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 9 #"step-peas"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 6 #"vecnil"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 9 #"step-peas"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 9 #"step-peas"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 9 #"step-peas"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 22 3 5 #"vec::"
0 0 25 3 1 #" "
0 0 22 3 4 #"'pea"
0 0 25 3 1 #" "
0 0 22 3 6 #"vecnil"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 9 #"step-peas"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 9 #"step-peas"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 22 3 5 #"vec::"
0 0 25 3 1 #" "
0 0 22 3 4 #"'pea"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 22 3 5 #"vec::"
0 0 25 3 1 #" "
0 0 22 3 4 #"'pea"
0 0 25 3 1 #" "
0 0 22 3 6 #"vecnil"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 9 #"step-peas"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 22 3 5 #"vec::"
0 0 25 3 1 #" "
0 0 22 3 4 #"'pea"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 22 3 5 #"vec::"
0 0 25 3 1 #" "
0 0 22 3 4 #"'pea"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 22 3 5 #"vec::"
0 0 25 3 1 #" "
0 0 22 3 4 #"'pea"
0 0 25 3 1 #" "
0 0 22 3 6 #"vecnil"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 3 #"the"
0 0 25 3 2 #" ("
0 0 22 3 3 #"Vec"
0 0 25 3 1 #" "
0 0 22 3 4 #"Atom"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 22 3 5 #"vec::"
0 0 25 3 1 #" "
0 0 22 3 4 #"'pea"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 22 3 5 #"vec::"
0 0 25 3 1 #" "
0 0 22 3 4 #"'pea"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 22 3 5 #"vec::"
0 0 25 3 1 #" "
0 0 22 3 4 #"'pea"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 22 3 5 #"vec::"
0 0 25 3 1 #" "
0 0 22 3 4 #"'pea"
0 0 25 3 1 #" "
0 0 22 3 6 #"vecnil"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 64
#"; if the motive argument is dim, ind-Nat works just like rec-Nat"
0 0 25 29 1 #"\n"
0 0 17 3 18 #"; let's define it!"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 5 #"claim"
0 0 25 3 1 #" "
0 0 14 3 12 #"also-rec-Nat"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 22 3 2 #"Pi"
0 0 25 3 3 #" (("
0 0 14 3 1 #"X"
0 0 25 3 1 #" "
0 0 22 3 1 #"U"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 22 3 2 #"->"
0 0 25 3 1 #" "
0 0 22 3 3 #"Nat"
0 0 25 3 2 #"  "
0 0 17 3 8 #"; target"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 14 3 1 #"X"
0 0 25 3 4 #"    "
0 0 17 3 6 #"; base"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 22 3 2 #"->"
0 0 25 3 1 #" "
0 0 22 3 3 #"Nat"
0 0 25 3 1 #" "
0 0 14 3 1 #"X"
0 0 25 3 1 #" "
0 0 17 3 6 #"; step"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"            "
0 0 14 3 1 #"X"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 14 3 1 #"X"
0 0 25 3 4 #"))) "
0 0 17 3 8 #"; return"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 12 #"also-rec-Nat"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 22 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"X"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 22 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 6 #"target"
0 0 25 3 1 #" "
0 0 14 3 4 #"base"
0 0 25 3 1 #" "
0 0 14 3 4 #"step"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 15 3 7 #"ind-Nat"
0 0 25 3 1 #" "
0 0 14 3 6 #"target"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 22 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"k"
0 0 25 3 2 #") "
0 0 17 3 67
#"; the motive returns X regardless of k, everythign else is the same"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"          "
0 0 14 3 1 #"X"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 14 3 4 #"base"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 14 3 4 #"step"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 19 #"; let's define last"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 5 #"claim"
0 0 25 3 1 #" "
0 0 14 3 4 #"last"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 22 3 2 #"Pi"
0 0 25 3 3 #" (("
0 0 14 3 1 #"E"
0 0 25 3 1 #" "
0 0 22 3 1 #"U"
0 0 25 3 2 #") "
0 0 17 3 21 #"; type of the element"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"       ("
0 0 14 3 1 #"l"
0 0 25 3 1 #" "
0 0 22 3 3 #"Nat"
0 0 25 3 3 #")) "
0 0 17 3 20 #"; size of the vector"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 22 3 2 #"->"
0 0 25 3 2 #" ("
0 0 22 3 3 #"Vec"
0 0 25 3 1 #" "
0 0 14 3 1 #"E"
0 0 25 3 2 #" ("
0 0 22 3 4 #"add1"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #")) "
0 0 17 3 42 #"; we can't get the last of an empty vector"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 14 3 1 #"E"
0 0 25 3 4 #"))) "
0 0 17 3 17 #"; and we return E"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 5 #"claim"
0 0 25 3 1 #" "
0 0 14 3 9 #"base-last"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 22 3 2 #"Pi"
0 0 25 3 3 #" (("
0 0 14 3 1 #"E"
0 0 25 3 1 #" "
0 0 22 3 1 #"U"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 22 3 2 #"->"
0 0 25 3 2 #" ("
0 0 22 3 3 #"Vec"
0 0 25 3 1 #" "
0 0 14 3 1 #"E"
0 0 25 3 2 #" ("
0 0 22 3 4 #"add1"
0 0 25 3 1 #" "
0 0 22 3 4 #"zero"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 14 3 1 #"E"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 9 #"base-last"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 22 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"E"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 22 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 2 #"es"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 15 3 4 #"head"
0 0 25 3 1 #" "
0 0 14 3 2 #"es"
0 0 25 3 5 #")))) "
0 0 17 3 36 #"; because we return the only element"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #" "
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0           0
