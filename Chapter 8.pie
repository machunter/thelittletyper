#lang pie

(claim step-+
       (-> Nat
           Nat))
(define step-+
  (lambda(n-1)
    (add1 n-1)))

(claim +
       (-> Nat Nat
           Nat))
(define +
  (lambda (n j)
    (iter-Nat n
              j
              step-+)))

(claim incr
       (-> Nat
           Nat))
(define incr
  (lambda(n)
    (iter-Nat n
              1
              (+ 1))))

(claim +1=add1
       (Pi ((n Nat))
           (= Nat (+ 1 n) (add1 n))))

(define +1=add1
  (lambda(n)
    (same (add1 n))))


(claim incr=add1
       (Pi ((n Nat))
           (= Nat (incr n) (add1 n))))


(claim base-incr=add1
       (= Nat (incr 0) (add1 0)))

(define base-incr=add1
  (same (add1 zero)))

(claim mot-incr=add1
       (-> Nat
           U))

(define mot-incr=add1
  (lambda (k)
    (= Nat (incr k) (add1 k))))

(claim step-incr=add1
       (Pi ((n-1 Nat))
           (-> (= Nat
                  (incr n-1)
                  (add1 n-1))
               (= Nat
                  (add1
                   (incr n-1))
                  (add1
                   (add1 n-1))))))

(define step-incr=add1
  (lambda(n-1)
    (lambda(incr=add1n-1)
      (cong incr=add1n-1 (+ 1)))))

(define incr=add1
  (lambda(n)
    (ind-Nat n
             mot-incr=add1
             base-incr=add1
             step-incr=add1)))

