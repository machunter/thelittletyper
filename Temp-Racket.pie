#lang pie
(iter-Nat 5
  3
  (lambda (smaller)
    (add1 smaller)))

(which-Nat 1
  2
  (lambda (smaller)
    (add1 smaller)))

(claim +
  (-> Nat Nat
      Nat))

(claim step-+
  (-> Nat
      Nat))
(define step-+
  (lambda (+n-1)
    (add1 +n-1)))

(define +
  (lambda (n j)
    (iter-Nat n
      j
      step-+)))

(claim *
  (-> Nat Nat
      Nat))

(claim make-step-*
  (-> Nat
      (-> Nat Nat
          Nat)))

(define make-step-*
  (lambda (j)
    (lambda (n-1 *n-1)
      (+ j *n-1))))

(claim step-*
  (-> Nat Nat Nat
      Nat))

(define step-*
  (lambda (j n-1 *n-1)
    (+ j *n-1)))

(define *
  (lambda (n j)
    (rec-Nat n
      0
      (make-step-* j))))

(claim my*
  (-> Nat Nat
      Nat))


(define my*
  (lambda (n j)
    (rec-Nat n
      0
      (step-* j))))